From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Tue, 10 Jan 2023 16:42:02 +0800
Subject: [PATCH] Fix some problems and update workerpool


diff --git a/src/main/java/co/earthme/hearse/concurrent/WorkerThread.java b/src/main/java/co/earthme/hearse/concurrent/WorkerThread.java
index 783c8ea55095dbabe594a9fe3dc604515bd0c2f1..421d4926ac674b5eb12d9613ceb6d20185ea557d 100644
--- a/src/main/java/co/earthme/hearse/concurrent/WorkerThread.java
+++ b/src/main/java/co/earthme/hearse/concurrent/WorkerThread.java
@@ -6,14 +6,10 @@ public class WorkerThread extends TickThread {
 
     public WorkerThread(String name) {
         super(name);
-        this.setDaemon(true);
-        this.setPriority(Thread.NORM_PRIORITY - 2);
     }
 
     public WorkerThread(Runnable run, String name) {
         super(run, name);
-        this.setDaemon(true);
-        this.setPriority(Thread.NORM_PRIORITY - 2);
     }
 
     public static boolean isWorker(){
diff --git a/src/main/java/co/earthme/hearse/concurrent/WorkerThreadPoolExecutor.java b/src/main/java/co/earthme/hearse/concurrent/WorkerThreadPoolExecutor.java
index 8899c02a2242b51097a03c7e3ca03b8768c60117..7e010bf23c9fc26284212a4388172f5d7d5a4b99 100644
--- a/src/main/java/co/earthme/hearse/concurrent/WorkerThreadPoolExecutor.java
+++ b/src/main/java/co/earthme/hearse/concurrent/WorkerThreadPoolExecutor.java
@@ -17,6 +17,14 @@ public class WorkerThreadPoolExecutor extends ThreadPoolExecutor {
         super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, workerThreadFactory::getNewThread, handler);
     }
 
+    public int getCurrentNotProcessingTasks(){
+        return this.getQueue().size();
+    }
+
+    public void clearAllTasks(){
+        this.getQueue().clear();
+    }
+
     public void executeWithSubTask(Runnable mainTask,Runnable subTask){
         final TaskEntry wrapped = new TaskEntry(subTask,mainTask);
         this.taskEntries.offer(wrapped);
diff --git a/src/main/java/co/earthme/hearse/concurrent/threadfactory/DefaultWorkerFactory.java b/src/main/java/co/earthme/hearse/concurrent/threadfactory/DefaultWorkerFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e3ae10fcc54b80ff4ec433f136d15d3b9fa4fe4
--- /dev/null
+++ b/src/main/java/co/earthme/hearse/concurrent/threadfactory/DefaultWorkerFactory.java
@@ -0,0 +1,22 @@
+package co.earthme.hearse.concurrent.threadfactory;
+
+import co.earthme.hearse.concurrent.WorkerThread;
+import co.earthme.hearse.concurrent.WorkerThreadFactory;
+import net.minecraft.server.MinecraftServer;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class DefaultWorkerFactory implements WorkerThreadFactory {
+    private static final AtomicInteger poolId = new AtomicInteger();
+    private final AtomicInteger threadId = new AtomicInteger();
+
+    @Override
+    public WorkerThread getNewThread(Runnable task) {
+        final WorkerThread workerThread = new WorkerThread(task,"pool-"+poolId.getAndIncrement()+"-worker-"+threadId.getAndIncrement());
+        if (workerThread.isDaemon()){
+            workerThread.setDaemon(false);
+        }
+        workerThread.setPriority(Thread.NORM_PRIORITY - 2);
+        workerThread.setContextClassLoader(MinecraftServer.class.getClassLoader());
+        return workerThread;
+    }
+}
diff --git a/src/main/java/co/earthme/hearse/server/ServerEntityTickHook.java b/src/main/java/co/earthme/hearse/server/ServerEntityTickHook.java
index 2c2f752e1ae846c2b24c2d46a13473836c5feac6..8605d867bea87095dcf43e1c1ebedbb9180c4480 100644
--- a/src/main/java/co/earthme/hearse/server/ServerEntityTickHook.java
+++ b/src/main/java/co/earthme/hearse/server/ServerEntityTickHook.java
@@ -2,7 +2,9 @@ package co.earthme.hearse.server;
 
 import co.earthme.hearse.HearseConfig;
 import co.earthme.hearse.concurrent.WorkerThread;
+import co.earthme.hearse.concurrent.WorkerThreadFactory;
 import co.earthme.hearse.concurrent.WorkerThreadPoolExecutor;
+import co.earthme.hearse.concurrent.threadfactory.DefaultWorkerFactory;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
@@ -13,6 +15,7 @@ import java.util.concurrent.atomic.AtomicInteger;
 
 public class ServerEntityTickHook {
     private static volatile boolean firstTick = false;
+    private static final WorkerThreadFactory defFactory = new DefaultWorkerFactory();
     private static final AtomicInteger threadId = new AtomicInteger();
     private static WorkerThreadPoolExecutor worker;
     private static boolean asyncEntityEnabled;
@@ -24,19 +27,25 @@ public class ServerEntityTickHook {
         worker.execute(task);
     }
 
+    public static void onServerStop() throws InterruptedException {
+        if (!asyncEntityEnabled){
+            return;
+        }
+        worker.shutdown();
+        while (!worker.awaitTermination(100,TimeUnit.MILLISECONDS));
+    }
+
     public static void init(){
-        final boolean asyncEntityEnabled1 = HearseConfig.getBoolean("enable-async-entity",true);
+        boolean asyncEntityEnabled1 = HearseConfig.getBoolean("enable-async-entity",true);
         final int workerCount = HearseConfig.getInt("async-entity-worker-count",Runtime.getRuntime().availableProcessors());
         if (asyncEntityEnabled1){
             worker = new WorkerThreadPoolExecutor(
                     workerCount,
                     workerCount,
-                    100,
+                    0L,
                     TimeUnit.MILLISECONDS,
                     new LinkedBlockingQueue<>(),
-                    task -> {
-                        return new WorkerThread(task,"Hearse-Worker-Thread # "+threadId.getAndIncrement());
-                    }
+                    defFactory
             );
         }
         asyncEntityEnabled = asyncEntityEnabled1;
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 2a8590d46bab64fe27e8dadf80f91ab0662a4352..5ef58831a857fd8aa4ac30147762dc17d773a53e 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -65,8 +65,6 @@ import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
-
-import it.unimi.dsi.fastutil.objects.ObjectList;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
 import net.minecraft.util.Mth;
@@ -795,7 +793,7 @@ public class Util {
         return objectArrayList;
     }
 
-    public static <T> void shuffle(ObjectList<T> list, RandomSource random) {
+    public static <T> void shuffle(ObjectArrayList<T> list, RandomSource random) {
         int i = list.size();
 
         for(int j = i; j > 1; --j) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 47e2ed40d5bcc8058666d42e455abab228ef3bf8..197f46d5d31d80eaf423263385d5759fd560e883 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -916,6 +916,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
         // Paper start - kill main thread, and kill it hard
         HearseConfig.save(); //Hearse
+        try {
+            ServerEntityTickHook.onServerStop(); //Hearse
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
         shutdownThread = Thread.currentThread();
         org.spigotmc.WatchdogThread.doStop(); // Paper
         if (!isSameThread()) {
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index dd1fe2f5b20b6f59db39aef57a29b68801acfd53..b122b4be317798ca0d6ac582472a6ac4c7d8c690 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -66,7 +66,7 @@ public class Explosion {
     private final float radius;
     private final DamageSource damageSource;
     private final ExplosionDamageCalculator damageCalculator;
-    private final ObjectList<BlockPos> toBlow;
+    private final ObjectArrayList<BlockPos> toBlow;
     private final Map<Player, Vec3> hitPlayers;
     public boolean wasCanceled = false; // CraftBukkit - add field
 
@@ -85,7 +85,7 @@ public class Explosion {
 
     public Explosion(Level world, @Nullable Entity entity, @Nullable DamageSource damageSource, @Nullable ExplosionDamageCalculator behavior, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
         this.random = RandomSource.createThreadSafe();
-        this.toBlow = ObjectLists.synchronize(new ObjectArrayList<>());
+        this.toBlow = new ObjectArrayList<>();
         this.hitPlayers = Maps.newConcurrentMap();
         this.level = world;
         this.source = entity;
