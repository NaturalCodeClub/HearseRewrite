From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Fri, 13 Jan 2023 09:01:48 +0800
Subject: [PATCH] Fix a dead lock


diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index b2eb6feffb2191c450175547c1371623ce5185eb..78bd56f150543d2e38cf1606b133d682194424d2 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -39,9 +39,9 @@ public final class ChunkEntitySlices {
     protected final Reference2ObjectMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
     protected final EntityList entities = new EntityList();
 
-    public ChunkHolder.FullChunkStatus status;
+    public volatile ChunkHolder.FullChunkStatus status;
 
-    protected boolean isTransient;
+    protected volatile boolean isTransient;
 
     public boolean isTransient() {
         return this.isTransient;
@@ -119,33 +119,33 @@ public final class ChunkEntitySlices {
 
     // returns true if this chunk has transient entities remaining
     public boolean unload() {
+        Entity[] collectedEntities;
+        int len;
         long id = this.accessLock.readLock();
         try {
-            final int len = this.entities.size();
-            final Entity[] collectedEntities = Arrays.copyOf(this.entities.getRawData(), len);
-
-            for (int i = 0; i < len; ++i) {
-                final Entity entity = collectedEntities[i];
-                if (entity.isRemoved()) {
-                    // removed by us below
-                    continue;
-                }
-                if (entity.shouldBeSaved()) {
-                    entity.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
-                    if (entity.isVehicle()) {
-                        // we cannot assume that these entities are contained within this chunk, because entities can
-                        // desync - so we need to remove them all
-                        for (final Entity passenger : entity.getIndirectPassengers()) {
-                            passenger.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
-                        }
+            len = this.entities.size();
+            collectedEntities = Arrays.copyOf(this.entities.getRawData(), len);
+        } finally {
+            this.accessLock.unlockRead(id);
+        }
+        for (int i = 0; i < len; ++i) {
+            final Entity entity = collectedEntities[i];
+            if (entity.isRemoved()) {
+                // removed by us below
+                continue;
+            }
+            if (entity.shouldBeSaved()) {
+                entity.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
+                if (entity.isVehicle()) {
+                    // we cannot assume that these entities are contained within this chunk, because entities can
+                    // desync - so we need to remove them all
+                    for (final Entity passenger : entity.getIndirectPassengers()) {
+                        passenger.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
                     }
                 }
             }
-
-            return this.entities.size() != 0;
-        } finally {
-            this.accessLock.unlockRead(id);
         }
+        return this.entities.size() != 0;
     }
 
     private List<Entity> getAllEntities() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4bca86e3f4b357381b4dbc581c841e7826cfab9c..4e7a69464d826f763b0ea6e182f3eea84a205d6c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4377,6 +4377,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         // Paper start
         this.setPosRaw(x, y, z, false);
     }
+
     public final void setPosRaw(double x, double y, double z, boolean forceBoundingBoxUpdate) {
         // Paper start - block invalid positions
         if (!checkPosition(this, x, y, z)) {
